[[_rebasing]]
=== Zmiana bazy

(((rebasing)))
W Gicie istnieją dwa podstawowe sposoby integrowania zmian z jednej gałęzi do drugiej: scalanie (polecenie `merge`) oraz zmiana bazy (polecenie `rebase`). 
W tym rozdziale dowiesz się, czym jest zmiana bazy, jak ją przeprowadzić, dlaczego jest to świetne narzędzie i w jakich przypadkach lepiej się powstrzymać od jego wykorzystania.

==== Typowa zmiana bazy

Jeśli cofniesz się do poprzedniego przykładu (sekcja Scalanie), zobaczysz, że rozszczepiłeś swoją pracę i wykonywałeś zmiany w dwóch różnych gałęziach.

.Początkowa historia po rozszczepieniu
image::images/basic-rebase-1.png[Początkowa historia po rozszczepieniu]

Najprostszym sposobem, aby zintegrować gałęzie - jak już napisaliśmy - jest polecenie `merge`. 
Przeprowadza ono trójstronne scalanie pomiędzy dwiema ostatnimi migawkami gałęzi (`C3` i `C4`) oraz ich ostatnim wspólnym przodkiem (`C2`), tworząc nową migawkę (oraz rewizję).

.Scalanie gałęzi integrujące rozszczepioną historię zmian
image::images/basic-rebase-2.png[Scalanie gałęzi integrujące rozszczepioną historię zmian]

Jednakże istnieje inny sposób: możesz stworzyć łatkę ze zmianami wprowadzonymi w `C4` i zaaplikować ją na rewizję `C3`. 
W Gicie nazywa się to zmianą bazy (ang. _rebasing_). 
Dzięki poleceniu `rebase` możesz wziąć wszystkie zmiany, które zostały zatwierdzone w jednej gałęzi i zaaplikować je w innej.(((git commands, rebase)))

W tym wypadku, mógłbyś uruchomić następujące polecenie:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Polecenie to działa przesuwając się do ostatniego wspólnego przodka obu gałęzi (tej w której się znajdujesz oraz tej do której robisz zmianę bazy), 
pobierając różnice opisujące kolejne zmiany wprowadzane przez kolejne rewizje w gałęzi w której się znajdujesz, zapisując je w tymczasowych plikach, 
następnie resetuje bieżącą gałąź do tej samej rewizji do której wykonujesz operację zmiany bazy, po czym aplikuje po kolei zapisane zmiany.

.Zmiana bazy dla zmian wprowadzonych w `C4` do `C3`
image::images/basic-rebase-3.png[Zmiana bazy dla zmian wprowadzonych w `C4` do `C3`]

W tym momencie możesz wrócić do gałęzi `master` i scalić zmiany wykonując proste przesunięcie wskaźnika.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Przesunięcie gałęzi master po operacji zmiany bazy
image::images/basic-rebase-4.png[Przesunięcie gałęzi master po operacji zmiany bazy]

Teraz migawka wskazywana przez `C4` jest dokładnie taka sama jak ta, na którą wskazuje `C5` w przykładzie ze scalaniem. 
Nie ma różnicy w produkcie końcowym integracji, ale zmiana bazy tworzy czystszą historię. 
Jeśli przejrzysz historię gałęzi po operacji rebase, wygląda ona na liniową: wygląda jakby cała praca była wykonywana stopniowo, nawet jeśli oryginalnie odbywała się równolegle.

Warto korzystać z tej funkcji, by mieć pewność, że rewizje zaaplikują się w bezproblemowy sposób do zdalnej gałęzi - być może w projekcie w którym próbujesz się udzielać, 
a którym nie zarządzasz. 
W takim wypadku będziesz wykonywał swoją pracę we własnej gałęzi, a następnie zmieniał jej bazę na `origin/master`, kiedy tylko będziesz gotowy do przesłania własnych poprawek 
do głównego projektu. 
W ten sposób osoba utrzymująca projekt nie będzie musiała dodatkowo wykonywać integracji - jedynie prostolinijne scalenie lub czyste zastosowanie zmian.

Zauważ, że migawka wskazywana przez wynikową rewizję bez względu na to, czy jest to ostatnia rewizja po zmianie bazy, czy ostatnia rewizja scalająca po operacji scalania, 
to taka sama migawka - różnica istnieje jedynie w historii. 
Zmiana bazy nanosi zmiany z jednej linii pracy do innej w kolejności, w jakiej były one wprowadzane, w odróżnieniu od scalania, które bierze dwie końcówki i integruje je ze sobą.

==== Ciekawsze operacje zmiany bazy

Poleceniem rebase możesz także zastosować zmiany na innej gałęzi niż ta, której zmieniasz bazę. 
Dla przykładu - weźmy historię taką jak na rysunku. 
Utworzyłeś gałąź tematyczną (`server`), żeby dodać nowe funkcje do kodu serwerowego, po czym utworzyłeś rewizję. 
Następnie utworzyłeś gałąź, żeby wykonać zmiany w kliencie (`client`) i kilkukrotnie zatwierdziłeś zmiany. 
W końcu wróciłeś do gałęzi `server` i wykonałeś kilka kolejnych rewizji.

[[rbdiag_e]]
.Historia z gałęzią tematyczną utworzoną na podstawie innej gałęzi tematycznej
image::images/interesting-rebase-1.png[Historia z gałęzią tematyczną utworzoną na podstawie innej gałęzi tematycznej]

Załóżmy, że zdecydowałeś się scalić zmiany w kliencie do kodu głównego, ale chcesz się jeszcze wstrzymać ze zmianami po stronie serwera, dopóki nie zostaną one dokładniej przetestowane. 
Możesz wziąć zmiany kodu klienta, których nie ma w kodzie serwera (`C8` i `C9`) i zastosować je na gałęzi głównej używając opcji `--onto` wraz z poleceniem `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

Oznacza to mniej więcej: "Przełącz się do gałęzi `client`, określ zmiany wprowadzone od czasu rozgałęzienia się ze wspólnego przodka gałęzi `client` i `server`, 
a następnie nanieś te zmiany na gałąź główną `master`". 
Jest to nieco skomplikowane, ale wynik jest całkiem niezły.

.Zmiana bazy gałęzi tematycznej odbitej z innej gałęzi tematycznej
image::images/interesting-rebase-2.png[Zmiana bazy gałęzi tematycznej odbitej z innej gałęzi tematycznej]

Teraz możesz przesunąć wskaźnik gałęzi głównej (`master`) do przodu:

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Przesunięcie do przodu gałęzi master w celu uwzględnienia zmian z gałęzi klienta

image::images/interesting-rebase-3.png[Przesunięcie do przodu gałęzi master w celu uwzględnienia zmian z gałęzi klienta]

Powiedzmy, że zdecydujesz się pobrać i scalić zmiany z gałęzi serwera. 
Możesz zmienić bazę gałęzi serwera na wskazywaną przez `master` bez konieczności przełączania się, poprzez użycie `git rebase [gałąź bazowa] [gałąź tematyczna]` - w ten sposób zmiany z gałęzi serwera zostaną zaaplikowane do gałęzi bazowej `master`:

[source,console]
----
$ git rebase master server
----

Polecenie odtwarza zmiany z gałęzi `server` na gałęzi `master` tak.

[[rbdiag_h]]
.Zmiana bazy gałęzi serwera na koniec gałęzi głównej
image::images/interesting-rebase-4.png[Zmiana bazy gałęzi serwera na koniec gałęzi głównej]

Następnie możesz przesunąć gałąź bazową (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Możesz teraz usunąć gałęzie `client` i `server`, ponieważ cała praca jest już zintegrowana i więcej ich nie będziesz potrzebował pozostawiając historię w stanie takim, jak na rysunku poniżej:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Ostateczna historia rewizji
image::images/interesting-rebase-5.png[Ostateczna historia rewizji]

[[_rebase_peril]]
==== Zagrożenia operacji zmiany bazy

(((rebasing, perils of)))
Błogosławieństwo, jakie daje możliwość zmiany bazy, ma swoją mroczną stronę. Można ją podsumować jednym zdaniem:

*Nie zmieniaj bazy rewizji, które wypchnąłeś już do publicznego repozytorium.*

Jeśli będziesz się stosował do tej reguły, wszystko będzie dobrze. 
W przeciwnym razie ludzie Cię znienawidzą, a rodzina i przyjaciele zaczną omijać szerokim łukiem.

Stosując operację zmiany bazy porzucasz istniejące rewizje i tworzysz nowe, które są podobne, ale jendak inne. 
Wypychasz gdzieś swoje zmiany, inni je pobierają, scalają i pracują na nich, a następnie nadpisujesz te zmiany poleceniem `git rebase` i wypychasz ponownie na serwer. 
Twoi współpracownicy będą musieli scalić swoją pracę raz jeszcze i zrobi się bałagan, kiedy spróbujesz pobrać i scalić ich zmiany z powrotem z Twoimi.

Spójrzmy na przykład obrazujący, jak operacja zmiany bazy może spowodować problemy. 
Załóżmy, że sklonujesz repozytorium z centralnego serwera, a następnie bazując na tych danych, wykonasz nowe zmiany. 
Twoja historia rewizji wygląda tak jak poniżej:

.Sklonowane repozytorium i dokonane zmiany
image::images/perils-of-rebasing-1.png[Sklonowane repozytorium i dokonane zmiany]

Teraz ktoś inny wykonuje swoją pracę, która obejmuje scalenie, i wypycha ją na centralny serwer. 
Pobierasz zmiany, scalasz nową, zdalną gałąź z własną pracą, w wyniku czego historia wygląda mniej więcej tak:

.Pobranie kolejnych rewizji i scalenie ich z własnymi zmianami
image::images/perils-of-rebasing-2.png[Pobranie kolejnych rewizji i scalenie ich z własnymi zmianami]

Następnie osoba, która wypchnęła scalone zmiany, rozmyśliła się i zdecydowała zamiast scalenia zmienić bazę swoich zmian; wykonuje `git push --force`, żeby zastąpić historię na serwerze. 
Następnie Ty pobierasz dane z serwera ściągając nowe rewizje.

[[_pre_merge_rebase_work]]
.Ktoś wypycha rewizje po operacji zmiany bazy porzucając rewizje, na których Ty oparłeś swoje zmiany
image::images/perils-of-rebasing-3.png[Ktoś wypycha rewizje po operacji zmiany bazy porzucając rewizje, na których Ty oparłeś swoje zmiany]

Teraz oboje macie kłopoty.
Jeśli użyjesz komendy `git pull`, stworzysz połączoną zmianę zawierającą obie linie historii, a Twoje repozytorium będzie wyglądało jak poniżej:

[[_merge_rebase_work]]
.Scalasz tę samą pracę raz jeszcze tworząc nową rewizję scalającą
image::images/perils-of-rebasing-4.png[Scalasz tę samą pracę raz jeszcze tworząc nową rewizję scalającą]

Jeśli uruchomisz `git log`, kiedy tak wygląda Twoja historia, zobaczysz dwa mylące zatwierdzenia, ponieważ będą one miały tego samego autora, datę i wiadomość.
Co więcej, jeśli ponownie prześlesz tę historię na serwer, ponownie wprowadzisz wszystkie te zatwierdzenia do centralnego serwera, co może jeszcze bardziej zmylić ludzi.
Można bezpiecznie zakładać, że inny programista nie chce, aby `C4` i `C6` były w historii; dlatego zmienił bazę.

[[_rebase_rebase]]
==== Zmiana bazy kiedy zmieniasz bazę

Jeśli *kiedykolwiek* znajdziesz się w takiej sytuacji, Git ma jeszcze trochę magię, która może Ci pomóc.
Jeśli ktoś w Twoim zespole wymusza zmiany, które nadpisują pracę, nad którą pracujesz, Twoim zadaniem jest dowiedzieć się, co jest Twoje i co zostało nadpisane.

Okazuje się, że oprócz sumy kontrolnej SHA-1, Git oblicza również sumę kontrolną, która jest oparta tylko na łatce wprowadzonej z zatwierdzeniem.
Nazywa się to `patch-id`.

Jeśli pobierzesz pracę, która została nadpisana i zmienisz bazę na początek nowej rewizji swojego partnera, Git często rozpozna, która część należy od Ciebie 
i ponownie ją zaaplikuje.

Na przykład w poprzednim scenariuszu, jeśli zamiast scalić, gdy jesteśmy w << _ pre_merge_rebase_work >> uruchomiamy `git rebase teamone / master`, to Git:

* Ustali, jakie prace są unikalne dla naszej gałęzi (`C2`, `C3`, `C4`, `C6`, `C7`)
* Określi, które nie są scalone (`C2`, `C3`, `C4`)
* Określi, które nie zostały nadpisane do gałęzi docelowej (tylko `C2` i `C3`, ponieważ `C4` to ta sama łatka co `C4'`)
* Zastosuje te rewizje na początku `teamone/master`

Zamiast wyniku, który widzimy w << _ merge_rebase_work >>, otrzymalibyśmy coś przypominającego bardziej << _ rebase_rebase_work >>.

[[_rebase_rebase_work]]
.Zmiana bazy na początek wypchniętej zmiany bazy
image::images/perils-of-rebasing-5.png[Zmiana bazy na początek wypchniętej zmiany bazy]

Działa to tylko wtedy, gdy `C4` i `C4'` utworzone przez Twojego partnera są niemal identyczną łatką.
W przeciwnym razie baza danych nie będzie w stanie stwierdzić, że jest duplikatem i doda kolejną łatkę podobną do `C4` 
(która prawdopodobnie nie zostanie poprawnie zaaplikowana, ponieważ zmiany będą już w pewnym stopniu naniesione).

Możesz to również uprościć, uruchamiając `git pull --rebase` zamiast normalnego `git pull`.
Lub możesz zrobić to ręcznie za pomocą `git fetch`, po którym następuje `git rebase teamone/master` (w tym przypadku).

Jeśli używasz `git pull` i chcesz ustawić `--rebase` jako domyślną opcję, możesz w konfiguracji ustawić wartość `pull.rebase`, np: `git config --global pull.rebase true`.

Jeśli traktujesz ponowną zmianę bazy jako sposób na uporządkowanie i pracę z zatwierdzeniami, zanim je wypchniesz, i jeśli zmienisz tylko zatwierdzenia, które nigdy nie były 
dostępne publicznie, wtedy wszystko będzie dobrze.
Jeśli zmienisz bazę do zmian, które już zostały publicznie wypchnięte, a ludzie mogli na nich bazować w swojej pracy, to możesz mieć kłopoty (ze strony Gita, ale i współpracowników).

Jeśli Ty lub Twój partner w pewnym momencie uzna to za konieczne, upewnij się, że wszyscy dostali informację, aby uruchomić `git pull --rebase`.

==== Zmiana bazy VS scalanie

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Teraz, kiedy widziałeś już zmiany bazy i scalanie w akcji, możesz się zastanawiać, która z opcji jest lepsza.
Zanim będziemy mogli odpowiedzieć na to pytanie, cofnijmy się nieco i porozmawiajmy o tym, czym w Gicie jest historia.

Jednym z punktów widzenia jest to, że historia commitów Twojego repozytorium jest *zapisem tego, co faktycznie się wydarzyło.*
Jest to dokument historyczny, cenny sam w sobie i nie powinien być naruszany.
Z tego punktu widzenia zmiana historii commitów jest niemalże bluźnierstwem. Zastanawiasz się czemu?
A co, jeśli pojawiła się niechlujna seria scaleń?
Tak, to się stało, a repozytorium powinno być sztuką zachowaną dla potomności.

Przeciwny punkt widzenia jest taki, że historia commitów jest *historią Twoich projektów.*
Tak jak, nie opublikowałbyś pierwszego szkicu książki, tak i wszystko inne zasługuje na ostrożną edycję.
To obóz, który używa narzędzi takich jak rebase i filter-branch, aby opowiedzieć historię w sposób najlepszy dla przyszłych czytelników.

Teraz, na pytanie, co jest lepsze - scalanie, czy zmiana bazy - będziesz szukał odpowiedzi wiedząc, że nie to jest takie oczywiste.
Git jest potężnym narzędziem i pozwala Ci na robienie z historią wielu rzeczy, ale każdy zespół i każdy projekt jest inny.
Teraz, kiedy już wiesz, jak działają obie te rzeczy, musisz zdecydować, który z nich będzie najlepszy w danej sytuacji.

Ogólnie rzecz biorąc, sposób na uzyskanie najlepszych wyników z obu światów polega na ponownym zatwierdzeniu zmian (które wprowadziłeś, ale jeszcze nie udostępniłeś) 
zanim je wypchniesz, aby uporządkować historię.
