[[_branch_management]]
=== Zarządzanie gałęziami

(((branches, managing)))
Teraz, kiedy już stworzyłeś, scaliłes i usunąłeś kilka gałęzi, spójrzmy na kilka dodatkowych narzędzi do zarządzania gałęziami, które będą przydatne kiedy już będziesz używać Gita na co dzień.

Komenda `git branch` ma więcej możliwości niż tylko tworzenie i usuwanie gałęzi.(((git commands, branch)))
Jesli uruchomisz ją bez argumentów, w wymniku otrzymasz prostą listę istniejących gałęzi:

[source,console]
----
$ git branch
  iss53
* master
  testing
----

Zauważ, że gałąź `master` została poprzedzona znakiem `*`: jest to wskazania na gałąź na której obecnie się znajdujesz.
Oznacza to, że jeśli zatwierdzisz zmiany w tym momencie, wskaźnik gałęzi `master` zostanie przesunięty do przodu wraz z nowo zatwierdzonymi zmianami.
Aby obejrzeć ostatni zatwierdzony zestaw zmian na każdej z gałęzi, możesz użyć polecenia `git branch -v`:

[source,console]
----
$ git branch -v
  iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 add scott to the author list in the readmes
----

Przydatne są opcje `--merged` i `--no-merged`, które mogą przefiltrować powyższą listę, aby wyświetlić gałęzie, które już zostały lub jeszcze nie zostały scalone do aktywnej gałęzi. 
Aby zobaczyć, które gałęzie zostały już scalone z bieżącą, uruchom polecenie `git branch --merged`:

[source,console]
----
$ git branch --merged
  iss53
* master
----

Ponieważ gałąź `iss53` została już scalona, znalazła się ona na Twojej liście. Gałęzie znajdujące się na tej liście, a niepoprzedzone znakiem `*` można właściwie bez większego ryzyka 
usunąć poleceniem `git branch -d`. Wykonana na nich praca została już scalona do innej gałęzi, więc niczego nie stracisz.

Aby zobaczyć wszystkie gałęzie zawierające zmiany, których jeszcze nie scaliłeś, możesz uruchomić polecenie `git branch --no-merged`:

[source,console]
----
$ git branch --no-merged
  testing
----

Pokazuje to Twoją inną gałąź.
Ponieważ zawiera ona zmiany, które nie zostały jeszcze scalone, próba usunięcia jej poleceniem `git branch -d` nie powiedzie się:

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

Jeśli naprawdę chcesz usunąć gałąź i stracić tę część pracy, możesz wymusić to opcją `-D` zgodnie z tym, co podpowiada komunikat na ekranie.

[TIP]
====
Opcje opisane powyżej: `--merged` i `--no-merged` pokażą odpowiednio co zostało scalone i niescalone do gałęzi na której aktualnie się znajdujesz (jeśli nie podano commita lub nazwy gałęzi jako argumentu).
	
Możesz zawsze podać opcjonalny argument, aby sprawdzić status scalenia z inną gałęzią bez przełączania się na nią.
====
