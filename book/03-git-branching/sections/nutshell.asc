[[_git_branches_overview]]
=== Gałęzie w pigułce

Żeby naprawdę zrozumieć sposób, w jaki Git obsługuje gałęzie, trzeba cofnąć się o krok i przyjrzeć temu, w jaki sposób Git przechowuje dane.

Jak może pamiętasz z rozdziału Pierwsze kroki, Git nie przechowuje danych jako serii zmian i różnic, ale jako zestaw migawek.

Kiedy zatwierdzasz zmiany w Gicie, ten zapisuje obiekt zmian (commit), który z kolei zawiera wskaźnik na migawkę zawartości (która w danej chwili znajduje się w poczekalni), metadane autora i opisu oraz zero lub więcej wskaźników na zmiany, które były bezpośrednimi rodzicami zmiany właśnie zatwierdzanej: brak rodziców w przypadku pierwszej, jeden w przypadku zwykłej, oraz kilka w przypadku zmiany powstałej wskutek scalenia dwóch lub więcej gałęzi.

Aby lepiej to zobrazować, załóżmy, że posiadasz katalog zawierający trzy pliki, które umieszczasz w poczekalni, a następnie zatwierdzasz zmiany. Umieszczenie w poczekalni plików powoduje wyliczenie sumy kontrolnej każdego z nich (skrótu SHA-1 wspomnianego w rozdziale Pierwsze kroki), zapisanie wersji plików w repozytorium (Git nazywa je blobami) i dodanie sumy kontrolnej do poczekalni:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----

Kiedy zatwierdzasz zmiany przez uruchomienie polecenia `git commit`, Git liczy sumę kontrolną każdego podkatalogu (w tym wypadku tylko głównego katalogu projektu) i zapisuje te trzy obiekty w repozytorium. Następnie tworzy obiekt zestawu zmian (commit), zawierający metadane oraz wskaźnik na główne drzewo projektu, co w razie potrzeby umożliwi odtworzenie całej migawki.

Teraz repozytorium Gita zawiera już 5 obiektów: jeden blob dla zawartości każdego z trzech plików, jedno drzewo opisujące zawartość katalogu i określające, które pliki przechowywane są w których blobach oraz jeden zestaw zmian ze wskaźnikiem na owo drzewo i wszystkimi metadanymi.

.Zmiany i ich drzewo
image::book/03-git-branching/images/commit-and-tree.png[Zmiany i ich drzewo]

Jeżeli dodasz kilka zmian i zatwierdzisz je ponownie, kolejny commit będzie zawierał wskaźnik do commita poprzedniego.

.Zmiany i ich rodzice
image::book/03-git-branching/images/commits-and-parents.png[Zmiany i ich rodzice]

Gałąź w Gicie jest po prostu lekkim, przesuwalnym wskaźnikiem, który może wskazywać na któryś z zestawów zmian. Domyślna nazwa gałęzi Gita to `master`. Kiedy zatwierdzasz pierwsze zmiany, otrzymujesz gałąź `master`, która wskazuje na ostatni zatwierdzony przez Ciebie zestaw. Z każdym zatwierdzeniem automatycznie przesuwa się ona do przodu.

[NOTE]
====
Gałąź `master` nie jest specjalną gałęzią. Jest dokładnie taka sama jak pozostałe.
Jedynym powodem dla którego każde repozytorium ją posiada jest to, że polecenie `git init` domyślnie tworzy ją i większość ludzi nie przejmuje się tym by to zmieniać.
====

.Gałąź i jej historia zmian
image::book/03-git-branching/images/branch-and-history.png[Gałąź i jej historia zmian]

[[_create_new_branch]]
==== Tworzenie nowej gałęzi

(((branches, creating)))
Co się stanie, jeśli utworzysz nową gałąź? Utworzony zostanie nowy wskaźnik, który następnie będziesz mógł przesuwać.
Powiedzmy, że tworzysz nową gałąź o nazwie `testing`. Zrobisz to za pomocą polecenia `git branch`:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

Polecenie to tworzy nowy wskaźnik na ten sam zestaw zmian, w którym aktualnie się znajdujesz.

.Dwie gałęzie wskazują na ten sam zestaw zmian
image::book/03-git-branching/images/two-branches.png[Dwie gałęzie wskazują na ten sam zestaw zmian]

Skąd Git wie, na której gałęzi się aktualnie znajdujesz? Utrzymuje on specjalny wskaźnik o nazwie `HEAD`. 
Istotnym jest, że bardzo różni się on od koncepcji HEADa znanej z innych systemów kontroli wersji, do jakich mogłeś się już przyzwyczaić, na przykład Subversion czy CVS. 
W Gicie jest to wskaźnik na lokalną gałąź, na której właśnie się znajdujesz. 
W tym wypadku, wciąż jesteś na gałęzi `master`. Polecenie `git branch` utworzyło jedynie nową gałąź, ale nie przełączyło Cię na nią.

.HEAD wskazuje na gałąź, na której się znajdujesz
image::book/03-git-branching/images/head-to-master.png[HEAD wskazuje na gałąź, na której się znajdujesz]

Możesz z łatwością to sprawdzić wywołując polecenie `git log` które pokaże Ci gdzie znajdują się wskazniki. Ta opcja to `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface
34ac2 Fixed bug #1328 - stack overflow under certain conditions
98ca9 The initial commit of my project
----

Teraz widać, że gałęzie `master` i `testing` znajdują się zaraz obok commitu `f30ab`.

[[_switching_branches]]
==== Przełączanie gałęzi

(((branches, switching)))
Aby przełączyć się na istniejącą gałąź, używasz polecenia `git checkout`.(((git commands, checkout)))
Przełączmy się zatem do nowo utworzonej gałęzi `testing`:

[source,console]
----
$ git checkout testing
----

`HEAD` zostaje zmieniony tak, by wskazywać na gałąź `testing`.

.HEAD wskazuje na bierzącą gałąź
image::book/03-git-branching/images/head-to-testing.png[HEAD wskazuje na bierzącą gałąź]

Jakie ma to znaczenie? Zatwierdźmy nowe zmiany:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.Gałąź wskazywana przez HEAD przesuwa się naprzód po każdym zatwierdzeniu zmian
image::book/03-git-branching/images/advance-testing.png[Gałąź wskazywana przez HEAD przesuwa się naprzód po każdym zatwierdzeniu zmian]

To interesujące, bo teraz Twoja gałąź `testing` przesunęła się do przodu, jednak gałąź `master` ciągle wskazuje ten sam zestaw zmian, 
co w momencie użycia `git checkout` do zmiany aktywnej gałęzi. Przełączmy się zatem z powrotem na gałąź `master`:

[source,console]
----
$ git checkout master
----

.HEAD przesuwa się kiedy zmieniasz gałąź
image::book/03-git-branching/images/checkout-master.png[HEAD przesuwa się kiedy zmieniasz gałąź]

Polecenie dokonało dwóch rzeczy. Przesunęło wskaźnik `HEAD` z powrotem na gałąź `master` i przywróciło pliki w katalogu roboczym do stanu z migawki, na którą wskazuje `master`. 
Oznacza to również, że zmiany, które od tej pory wprowadzisz, będą rozwidlały się od starszej wersji projektu. 
W gruncie rzeczy cofa to tymczasowo pracę, jaką wykonałeś na gałęzi `testing`, byś mógł z dalszymi zmianami pójść w innym kierunku.

[NOTE]
.Przełączanie gałęzi zmienia pliki w katalogu roboczym
====
Ważne jest to, że kiedy przełączasz gałąź w Git, pliki zmieniają się w Twoim katalogu roboczym. 
Jeśli przełączysz się na starszą gałąź Twój katalog roboczy zostanie cofnięty tak, aby wyglądał jak w chwili zatwierdzenia ostatniej zmiany na tej gałęzi. 
Jeśli Git nie może tego gładko zrobić, to nie pozwoli Ci na przełączenie.
====

Wykonajmy teraz kilka zmian i zatwierdźmy je:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Teraz historia Twojego projektu została rozszczepiona (zobacz Rozwidlona historia gałęzi). 
Stworzyłeś i przełączyłeś się na gałąź, wykonałeś na niej pracę, a następnie powróciłeś na gałąź główną i wykonałeś inną pracę. 
Oba zestawy zmian są od siebie odizolowane w odrębnych gałęziach: możesz przełączać się pomiędzy nimi oraz scalić je razem, kiedy będziesz na to gotowy. 
A wszystko to wykonałeś za pomocą prostych poleceń `branch`, `checkout` i `commit`.

[[divergent_history]]
.Rozwidlona historia gałęzi
image::book/03-git-branching/images/advance-master.png[Rozwidlona historia gałęzi]

Możesz również zobaczyć to w prosty sposób z poleceniem `git log`. 
Wywołując `git log --oneline --decorate --graph --all` uzyskasz historię Twoich zmian, pokazując gdzie znajdują się wskaźniki gałęzi i jak Twoja historia została rozwidlona.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Ponieważ gałęzie w Gicie są tak naprawdę prostymi plikami, zawierającymi 40 znaków sumy kontrolnej SHA-1 zestawu zmian, na który wskazują, są one tym samym bardzo tanie w tworzeniu i usuwaniu. 
Stworzenie nowej gałęzi zajmuje dokładnie tyle czasu, co zapisanie 41 bajtów w pliku (40 znaków + znak nowej linii).

Wyraźnie kontrastuje to ze sposobem, w jaki większość narzędzi do kontroli wersji obsługuje gałęzie, gdzie z reguły w grę wchodzi kopiowanie wszystkich plików projektu do osobnego katalogu. 
Może to trwać kilkanaście sekund, czy nawet minut - w zależności od rozmiarów projektu, podczas gdy w Gicie jest zawsze natychmiastowe. 
Co więcej, ponieważ wraz z każdym zestawem zmian zapamiętujemy jego rodziców, odnalezienie wspólnej bazy przed scaleniem jest automatycznie wykonywane za nas i samo w sobie jest niezwykle proste. 
Możliwości te pomagają zachęcić deweloperów do częstego tworzenia i wykorzystywania gałęzi.

Zobaczmy, dlaczego Ty też powinieneś.
