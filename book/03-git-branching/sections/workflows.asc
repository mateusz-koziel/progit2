=== Sposób pracy z gałęziami

Teraz, kiedy poznałeś już podstawy gałęzi i scalania, co ze zdobytą wiedzą możesz i co powinieneś zrobić? 
W tej części zajmiemy się typowymi schematami pracy, które stają się dostępne dzięki lekkiemu modelowi gałęzi. 
Pozwoli Ci to podjąć decyzję, czy warto stosować je w swoim cyklu rozwoju projektów.

==== Gałęzie długodystansowe

(((branches, long-running)))
Ponieważ Git używa prostego scalania trójstronnego, scalanie zmian z jednej gałęzi do drugiej kilkukrotnie w długim okresie czasu nie sprawia problemu. 
Oznacza to, że możesz utrzymywać kilka gałęzi, które są zawsze otwarte i których używasz dla różnych faz w cyklu rozwoju. 
Możesz scalać zmiany regularnie z jednych gałęzi do innych.

Wielu programistów pracuje z Gitem wykorzystując to podejście, trzymając w gałęzi `master` jedynie stabilny kod; możliwe, że jedynie kod, który już został albo w najbliższej 
przyszłości zostanie wydany. Równolegle utrzymują oni inną gałąź o nazwie `develop` lub `next`, na której pracują lub używają jej do stabilizacji przyszłych wersji; 
zawarta w niej praca nie musi być zawsze stabilna, lecz po ustabilizowaniu może być scalona do gałęzi `master`. Taką gałąź wykorzystuje się także do zaciągania zmian z gałęzi tematycznych 
(gałęzi krótkodystansowych, takich jak wcześniejsza `iss53`) oraz do testowania tych zmian i upewnienia się, że nie wprowadzają one nowych błędów.

W rzeczywistości mówimy o wskaźnikach przesuwających się w przód po zatwierdzanych przez Ciebie zestawach zmian. 
Stabilne gałęzie znajdują się w historii repozytorium na przedzie, a gałęzie robocze na jej końcu (patrz Rysunek 26).

.Liniowy widok gałęzi potępowo-stabilnych
image::images/lr-branches-1.png[Liniowy widok gałęzi potępowo-stabilnych]

Ogólnie, łatwiej jest mysleć o nich jak o silosach na zmiany, gdzie grupy zmian promowane są do stabilniejszych silosów, po uprzednim przejściu testów.

[[lrbranch_b]]
.Widok silosu gałęzi potępowo-stabilnych
image::images/lr-branches-2.png[Widok silosu gałęzi potępowo-stabilnych]

Możesz powielić ten schemat na kilka poziomów stabilności. 
Niektóre, większe projekty posiadają dodatkowo gałąź `proposed` albo `pu` ("proposed updates" — proponowane zmiany), scalającą gałęzie, które nie są jeszcze gotowe trafić do gałęzi 
`next` czy `master`. Zamysł jest taki, aby gałęzie reprezentowały różne poziomy stabilności. 
Kiedy osiągają wyższy stopień stabilności, są scalane do gałęzi powyżej. Podobnie jak poprzednio, posiadanie takich długodystansowych gałęzi nie jest konieczne, 
ale często bardzo pomocne, zwłaszcza jeśli pracujesz przy dużych, złożonych projektach.

[[_topic_branch]]
==== Gałęzie tematyczne

(((branches, topic)))
Gałęzie tematyczne, dla odmiany, przydadzą się w każdym projekcie, niezależnie od jego rozmiarów. 
Gałąź tematyczna to gałąź krótkodystansowa, którą tworzysz i używasz w celu stworzenia pojedynczej funkcji lub innych tego rodzaju zmian. 
Z całą pewnością nie jest to coś czego chciałbyś używać pracując z wieloma innymi systemami kontroli wersji, ponieważ scalanie i tworzenie nowych gałęzi 
jest w nich zbyt kosztowne. W Gicie tworzenie gałęzi, praca na nich jak i kilkukrotne scalanie w ciągu dnia jest nie tyle powszechnie stosowane i naturalne, co wręcz porządane.

Widziałeś to w poprzedniej sekcji, kiedy pracowaliśmy z gałęziami `iss53` i `hotfix`. Stworzyłeś wewnątrz nich kilka rewizji, po czym usunąłeś je zaraz po scaleniu zmian z gałęzią główną. 
Ta technika pozwala na szybkie i efektywne przełączanie kontekstu. Ponieważ Twój kod jest wyizolowany w osobnych silosach, w których wszystkie zmiany są związane z pracą do jakiej 
została stworzona gałąź, znacznie łatwiej jest połapać się w kodzie podczas jego przeglądania, recenzowania, etc. 
Możesz przechowywać tam swoje zmiany przez kilka minut, dni, miesięcy i scalać je dopiero kiedy są gotowe, 
bez znaczenia w jakiej kolejności zostały stworzone oraz w jaki sposób przebiegała praca nad nimi.

Rozważ przykład wykonywania pewnego zadania (na gałęzi głównej), stworzenia gałęzi w celu rozwiązania konkretnego problemu (`iss91`), pracy na niej przez chwilę, 
stworzenia drugiej gałęzi w celu wypróbowania innego sposobu rozwiązania tego samego problemu (`iss91v2`), powrotu do gałęzi głównej i pracy z nią przez kolejną chwilę, 
a następnie stworzenia tam kolejnej gałęzi do sprawdzenia pomysłu, co do którego nie jesteś pewny, czy ma on sens (gałąź `dumbidea`). 
Twoja historia rewizji będzie wygląda mniej więcej tak:

.Wielotematyczne rozgałezienie
image::images/topic-branches-1.png[Wielotematyczne rozgałezienie]

Teraz, powiedzmy, że zadecydowałeś, że najbardziej podoba Ci się drugie rozwiązanie Twojego problemu (`iss91v2`). 
Postanowiłeś także pokazać gałąź `dumbidea` swoim współpracownikom i okazało się, że pomysł jest genialny. 
Możesz wyrzucić oryginalne rozwiązanie problemu znajdujące się w gałęzi `iss91` (tracąc rewizje `C5` i `C6`) i scalić dwie pozostałe gałęzie. 
Twoja historia będzie wyglądać jak ponieżej:

.Historia po scaleniu gałęzi `dumbidea` i `iss91v2`
image::images/topic-branches-2.png[Historia po scaleniu gałęzi `dumbidea` i `iss91v2`]

Wiecej szczegółów na temat możliwosci cyklu pracy z projektem Gita znajdziesz w rozdziale Rozproszony Git. Zanim więc zadecydujesz, którego schematu użyjesz w swoim następnym 
projekcie, przeczytaj wspomniany rozdział.

Ważne jest, aby pamiętać, że wszystko co robisz na gałeziach jest całkowicie lokalne. 
Tworząc nowe gałęzie i scalając je później, robisz to wyłącznie w ramach własnego repozytorium - bez jakiejkolwiek komunikacji z serwerem.
