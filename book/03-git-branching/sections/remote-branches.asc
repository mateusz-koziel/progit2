[[_remote_branches]]
=== Gałęzie zdalne

(((branches, remote)))(((references, remote)))
Zdalne odnośniki są odnośnikami (wskaźnikami) do Twoich zdalnych repozytoriów, włączając gałęzie, tagi, etc.
Aby otrzymać pełna listę zdalnych odnośników, użyj komendy `git ls-remote [remote]` lub `git remote show [remote]` dla zdalnej gałęzi.
Niemniej jednak, bardziej powszechnym podejściem jest skorzystanie z zalet zdalnego śledzenia gałęzi.

Zdalnie śledzone gałęzie są odnośnikami do stanu gałęzi w zdalnym repozytorium. 
Są to lokalne odnośniki, których nie można przenosić; są one przenoszone automatycznie za każdym razem, kiedy wykonujesz jakieś operacje zdalne. 
Zdalnie śledzone gałęzie zachowują się jak zakładki przypominające Ci, gdzie znajdowały się gałęzie w Twoich zdalnych repozytoriach ostatnim razem, kiedy się z nim łączyłeś.

Przyjmują one formę: `(remote)/(branch)`.
Na przykład, gdybyś chciał zobaczyć jak wyglada gałąź `master` w Twoim zdalnym repozytorium `origin` w chwili, kiedy po raz ostatni się z nim komunikowałeś, 
musiałbyś sprawdzić gałąź `origin/master`. 
Jeśli pracowałeś nad problemem `iss53` razem z partnerem, który wypchnął gałąź `iss53`, możesz mieć ją jako lokalną, ale gałąź na serwerze będzie wskazywała na rewizję 
znajdującą się w `origin/iss53`.

Może być to nieco mylące, więc przyjrzyjmy się dokładniej przykładowi. 
Powiedzmy, że w swojej sieci masz serwer Gita pod adresem `git.ourcompany.com`. 
Po sklonowaniu z niego repozytorium, Git automatycznie nada mu nazwę `origin`, pobierze wszystkie dane, stworzy wskaźnik do miejsca gdzie znajduje się gałąź `master` 
i nazwie ją lokalnie `origin/master`. 
Git da Ci również do pracy lokalną gałąź `master` zaczynającą się w tym samym miejscu, co zdalna (Rysunek 30).

[NOTE]
.``origin'' nie jest wyjątkowy
====
Tak jak `master` nie jest specjalną gałęzią, tak samo `origin`.
Podczas kiedy `master` jest domyślną nazwą dla pierwszej gałęzi, która pojawia się, kiedy użyjesz `git init`, `origin` jest domyślną nazwą dla zdalnych gałęzi, kiedy użyjesz `git clone`.
Jeśli wykonasz komendę `git clone -o booyah` otrzymasz domyślnie gałąź zdalną `booyah/master`.
====

.Serwer i lokalne repozytoria po sklonowaniu
image::images/remote-branches-1.png[Serwer i lokalne repozytoria po sklonowaniu]

Jeśli wykonasz jakąś pracę na lokalnej gałęzi `master`, a w międzyczasie ktoś inny wypchnie zmiany na `git.ourcompany.com` i gałąź `master`, wówczas wasze historie przesuną się do 
przodu w różny sposób. Co więcej, dopóki nie skontaktujesz się z serwerem zdalnym, Twój wskaźnik `origin/master` pozostanie w miejscu.

.Lokalna i zdalna część pracy może się różnić
image::images/remote-branches-2.png[Lokalna i zdalna część pracy może się różnić]

Aby zsynchronizować swoją pracę, wykonaj komendę `git fetch origin`.
Polecenie sprawdzi na serwerze gałąź `origin` (w tym przypadku na `git.ourcompany.com`), zaciągnie dane których jeszcze nie masz, zaktualizuje lokalną bazę danych i przesunie 
wskaźnik `origin/master` na nową, najbardziej aktualną pozycję.

.`git fetch` aktualizuje Twoje zdalne odnośniki
image::images/remote-branches-3.png[`git fetch` aktualizuje Twoje zdalne odnośniki]

Aby zaprezentować fakt posiadania kilku zdalnych serwerów oraz stan ich zdalnych gałęzi, załóżmy, że posiadasz jeszcze jeden firmowy serwer Gita, który jest używany wyłącznie przez 
jeden z Twoich zespołów. Jest to serwer dostępny pod adresem `git.team1.ourcompany.com`. Możesz go dodać do projektu, nad którym pracujesz, jako nowy zdalny odnośnik uruchamiając 
polecenie `git remote add` tak, jak pokazaliśmy to w Rozdziale 2. Nazwij go `teamone`, dzięki czemu później będziesz używał tej nazwy zamiast pełnego adresu URL.

.Dodawanie kolejnego zdalnego serwera
image::images/remote-branches-4.png[Dodawanie kolejnego zdalnego serwera]

Teraz, możesz uruchomić `git fetch teamone`, aby pobrać ze zdalnego serwera `teamone` wszystko, co jest nowe, a czego jeszcze nie masz w lokalnym repozytorium.
Ponieważ serwer ten zawiera podzbiór danych które zawiera serwer `origin`, Git nie pobiera niczego, ale tworzy zdalną gałąź `teamone/master` wskazującą na rewizję dostępną w repozytorium 
`teamone` i jej gałęzi `master`.

.Zdalne sledzenie gałęzi `teamone/master`
image::images/remote-branches-5.png[Zdalne sledzenie gałęzi `teamone/master`]

[[_pushing_branches]]
==== Wypychanie zmian

(((pushing)))
Jeśli chcesz podzielić się swoją gałęzią ze światem, musisz wypchnąć zmiany na zdalny serwer, na którym posiadasz prawa zapisu. 
Twoje lokalne gałęzie nie są automatycznie synchronizowane z serwerem, na którym zapisujesz - musisz jawnie określić gałęzie, których zmianami chcesz się podzielić. 
W ten sposób możesz używać prywatnych gałęzi do pracy, której nie chcesz dzielić, i wypychać jedynie gałęzie tematyczne, w ramach których współpracujesz.

Jeśli posiadasz gałąź o nazwie `serverfix`, na której chcesz współpracować z innymi, możesz wypchnąć swoje zmiany w taki sam sposób jak wypychałeś je w przypadku pierwszej gałęzi. 
Uruchom `git push <nazwa zdalnego repozytorium> <nazwa gałęzi>`:(((git commands, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

Jest to pewien skrót. 
Git automatycznie sam rozwija nazwę `serverfix` do pełnej `refs/heads/serverfix:refs/heads/serverfix`, co oznacza "Weź moją lokalną gałąź *serverfix* i wypchnij zmiany, 
aktualizując zdalną gałąź *serverfix*". Zajmiemy się szczegółowo częścią `refs/heads/` w Rozdziale 9, więc w tym momencie nie musisz się tym przejmować. 
Możesz także wykonać `git push origin serverfix:serverfix` co przyniesie ten sam efekt - dla Gita znaczy to "Weź moją gałąź *serverfix* i uaktualnij nią zdalną gałąź *serverfix*". 
Możesz używać tego formatu do wypychania lokalnych gałęzi do zdalnych o innej nazwie. Gdybyś nie chciał, żeby gałąź na serwerze nazywała się `serverfix` mógłbyś uruchomić polecenie w 
formie `git push origin serverfix:supergałąź` co spowodowałoby wypchnięcie gałęzi `serverfix` do `supergałąź` w zdalnym repozytorium.

[NOTE]
.Nie wpisuj ciągle swojego hasła
====
Jeśli używasz HTTPS do wypychania zmian, serwer Gita będzie pytał Cię o nazwę użytkownika i hasło.
Domyślnie będzie to informacja w terminalu, na podstawie której serwer będzie wiedział, czy masz prawo do wypchnięcia zmian.

Jesli nie chcesz za każdym razem wpisywać tych danych podczas wypychania zmian, możesz ustawić `credential cache`.
Krótko mówiąc, przez kilka minut trzyma to Twoje dane logowania w pamięci. Możesz to prosto uruchomić poprzez użycie: `git config --global credential.helper cache`.

Po więcej informacji na temat opcji przechowywania danych logowania, zobacz Credential Caching.
====

Następnym razem kiedy Twoi współpracownicy pobiorą dane z serwera, uzyskają referencję do miejsca, w którym została zapisana Twoja wersja `serverfix` pod zdalną gałęzią `origin/serverfix`:

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

Warto zauważyć, że kiedy podczas pobierania ściągasz nową, zdalną gałąź, nie uzyskujesz automatycznie lokalnej, edytowalnej jej wersji. 
Innymi słowy, w tym przypadku, nie masz nowej gałęzi `serverfix` na której możesz do razu pracować - masz jedynie wskaźnik `origin/serverfix` którego nie można modyfikować.

Aby scalić pobraną pracę z bieżącą gałęzią roboczą uruchom polecenie `git merge origin/serverfix`. 
Jeśli potrzebujesz własnej gałęzi `serverfix` na której będziesz mógł pracować dalej, możesz ją stworzyć bazując na zdalnej gałęzi:

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Stworzy to loaklną gałąź z dokładną zawartością `origin/serverfix`. Różnica jest taka, że będziesz mógł na niej pracować.

[[_tracking_branches]]
==== Gałęzie sledzące

(((branches, tracking)))(((branches, upstream)))
Przełączenie do lokalnej gałęzi ze zdalnej automatycznie tworzy coś, co określa się *gałęzią śledzącą*.
Gałęzie śledzące są gałęziami lokalnymi, które posiadają bezpośrednią relację z gałęzią zdalną. 
Jeśli znajdujesz się w gałęzi śledzącej, po wpisaniu `git push` Git automatycznie wie, na który serwer wypchnąć zmiany. 
Podobnie uruchomienie `git pull` na jednej z takich gałęzi pobiera wszystkie dane i odnośniki ze zdalnego repozytorium i automatycznie scala zmiany z gałęzi zdalnej do 
odpowiedniej gałęzi zdalnej.

Po sklonowaniu repozytorium automatycznie tworzona jest gałąź `master`, która śledzi `origin/master`. 
Z tego właśnie powodu polecenia `git push` i `git pull` działają od razu, bez dodatkowych argumentów. 
Jednakże, możesz skonfigurować inne gałęzie tak, żeby śledziły zdalne odpowiedniki, albo tak aby nie śledziły gałęzi `master`. 
Prosty przypadek to przywołany już wcześniej przykład polecenia `git checkout -b [gałąź] [nazwa zdalnego repozytorium]/[gałąź]`. 
Jeśli pracujesz z Gitem nowszym niż 1.6.2, możesz także użyć skrótu `--track`:

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

W rzeczywistości jest to tak powszechne, że istnieje nawet skrót do tego skrótu. Jeśli nazwa gałęzi, na którą próbujesz przejść (a) nie istnieje i (b) dokładnie pasuje tylko do jednej zdalnej nazwy, Git utworzy dla Ciebie gałąź śledzącą:

[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Żeby skonfigurować lokalną gałąź z inną nazwą niż zdalna, możesz skorzystać z pierwszej wersji polecenia podając własną, lokalną nazwę gałęzi:

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

Teraz Twoja lokalna gałąź `sf` będzie pozawalała na automatyczne wypychanie zmian jak i ich pobieranie do/z `origin/serverfix`.

Jeśli posiadasz już lokalną gałąź i chcesz zestawić ją z gałęzią zdalną , którą właśnie ściągnąłeś lub chcesz zmienić śledzoną gałąź, możesz użyć opcji `-u` lub` `--set-upstream-to` w poleceniu `git branch`, aby jawnie ustawić ją w dowolnym momencie.

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
.Skrócona metoda
====
Gdy masz skonfigurowaną gałąź śledzenia, możesz odwołać się do jej gałęzi źródłowej ze skrótem `@{upstream}` lub `@{u}`.
Więc jeśli jesteś w gałęzi `master` i śledzisz `origin/master`, możesz wykonać `git merge @{u}` zamiast `git merge origin/master`.(((+++@{u}+++)))(((+++@{upstream}+++)))
====

Jeśli chcesz zobaczyć, jakie masz ustawione gałęzie śledzące, możesz użyć opcji `-vv` dla komendy `git branch`.
Spowoduje to wyświetlenie listy gałęzi lokalnych zawierających więcej informacji, w tym informacje o śledzeniu każdej gałęzi.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
----

Widzimy więc, że nasza gałąź `iss53` śledzi `origin/iss53` i na obu jest `ahead`, co oznacza, że ​​mamy dwie lokalne gałęzie, które nie zostały wypchnięte na serwer.
Możemy również zobaczyć, że nasza gałąź `master` śledzi `origin/master` i jest aktualna.
Następnie widzimy, że nasza gałąź `serverfix` śledzi gałąź `server-fix-good` na naszym serwerze `teamone`, a z wyniku odczytujemy, że istnieje jedno zatwierdzenie na serwerze, 
którego nie mamy i trzy lokalne zmiany, których nie wypchnęliśmy.
Wreszcie możemy zauważyć, że nasza gałąź `testing` nie śledzi żadnej zdalnej gałęzi.

Ważne jest, aby pamiętać, że są to informacje aktualne tylko od czasu ostatniego pobrania danych z każdego serwera.
To polecenie nie dociera do serwerów, ale informuje o tym, co zostało z nich zbuforowane lokalnie.
Jeśli chcesz mieć najnowsze dane (ilość zmian lokalnych, zdalnych, oczekujących, etc.), musisz pobrać je ze wszystkich swoich zdalnych repozytoriów.
Możesz to zrobić w ten sposób:

[source,console]
----
$ git fetch --all; git branch -vv
----

==== Zaciąganie

(((pulling)))
Podczas gdy komenda `git fetch` pobiera wszystkie zmiany z serwera, których jeszcze nie posiadasz, to jednoczesnie nie dokonuje żadnych zmian w Twoim katalogu roboczym.
Po prostu dostarczy Ci dane i umożliwi ich połączenie.
Istnieje jednak polecenie o nazwie `git pull`, które jest niemal równoważne z następującymi po sobie `git fetch` i `git merge`.
Jeśli masz skonfigurowaną gałąź śledzenia, jak pokazano w poprzedniej sekcji, którą ustawiłeś jawne albo utworzyłeś za pomocą komend `clone` lub `checkout`, 
to `git pull` sprawdzi na jakim serwerze, jaką gałąź śledzi Twoja bieżąca gałąź, pobierze z tego serwera dane, których nie masz, a następnie spróbuje scalić zmiany.

Ogólnie rzecz biorąc, lepiej po prostu użyć komend `fetch` i `merge` jawnie, ponieważ magia `git pull` może często być myląca.

[[_delete_branches]]
==== Usuwanie zdalnych gałęzi

(((branches, deleting remote)))
Załóżmy, że skończyłeś pracę ze zdalną gałęzią - powiedzmy, że Ty i Twoi współpracownicy zakończyliście pracę nad nową funkcją i scaliliście zmiany ze zdalną gałęzią główną `master` 
(czy gdziekolwiek indziej, gdzie znajduje się stabilna wersja kodu). 
Możesz usunąć zdalną gałąź używając `--delete` przy opcji `git push`. 
Aby np. usunąć z serwera gałąź `serverfix` uruchom polecenie:

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

Właściwie, wszystko co zostało zrobione to usunięcie wskaźnika z serwera.
Serwer Gita będzie trzymał dane do czasu, aż nie zostanie uruchomione odśmiecanie, więc nie powinno być większych problemów z odwróceniem zmian, jeśli była to przypadkowa operacja.
