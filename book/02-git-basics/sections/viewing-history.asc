[[_viewing_history]]
=== Podgląd historii rewizji

Po kilku rewizjach, lub w przypadku sklonowanego repozytorium zawierającego już własną historię, przyjdzie czas, że będziesz chciał spojrzeć w przeszłość i sprawdzić jakich zmian dokonano.
Najprostszym, a zarazem najsilniejszym, służącym do tego narzędziem jest `git log`.

Poniższe przykłady operują na moim, bardzo prostym, demonstracyjnym projekcie o nazwie "simplegit".
Aby go pobrać uruchom:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Jeśli teraz uruchomisz na sklonowanym repozytorium polecenie `git log`, uzyskasz wynik podobny do poniższego:

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Domyślnie, polecenie `git log` uruchomione bez argumentów, listuje zmiany zatwierdzone w tym repozytorium w odwrotnej kolejności chronologicznej, czyli pokazując najnowsze zmiany w pierwszej kolejności. Jak widzisz polecenie wyświetliło zmiany wraz z ich sumą kontrolną SHA-1, nazwiskiem oraz e-mailem autora, datą zapisu oraz notką zmiany.

Duża liczba opcji polecenia `git log` oraz ich różnorodność pozwalają na dokładne wybranie interesujących nas informacji. Za chwilę przedstawimy najważniejsze i najczęściej używane spośród nich.

Jedną z najprzydatniejszych opcji jest `-p`. Pokazuje ona różnice wprowadzone z każdą rewizją. Dodatkowo możesz użyć opcji `-2` aby ograniczyć zbiór do dwóch ostatnich wpisów:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

Opcja spowodowała wyświetlenie tych samych informacji z tą różnicą, że bezpośrednio po każdym wpisie został pokazywany tzw. diff, czyli różnica. Jest to szczególnie przydatne podczas recenzowania kodu albo szybkiego przeglądania zmian dokonanych przez Twojego współpracownika. Dodatkowo możesz skorzystać z całej serii opcji podsumowujących wynik działania `git log`. Na przykład, aby zobaczyć skrócone statystyki każdej z zatwierdzonych zmian, użyj opcji `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Jak widzisz, `--stat` wyświetlił pod każdym wpisem historii listę zmodyfikowanych plików, liczbę zmienionych plików oraz liczbę dodanych i usuniętych linii. Dodatkowo, opcja dołożyła podobne podsumowanie wszystkich informacji na samym końcu wyniku.

Kolejnym bardzo przydatnym parametrem jest `--pretty`. Pokazuje on wynik polecenia log w nowym, innym niż domyślny formacie. Możesz skorzystać z kilku pre-definiowanych wariantów. Opcja `oneline` wyświetla każdą zatwierdzoną zmianę w pojedynczej linii, co szczególnie przydaje się podczas wyszukiwania w całym gąszczu zmian. Dodatkowo, `short`, `full` oraz `fuller` pokazują wynik w mniej więcej tym samym formacie ale odpowiednio z  większą lub mniejszą ilością informacji:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

Najbardziej interesująca jest tutaj jednak opcja `format`. Pozwala ona określić własny wygląd i format informacji wyświetlanych poleceniem log. Funkcja przydaje się szczególnie podczas generowania tychże informacji do dalszego, maszynowego przetwarzania - ponieważ sam definiujesz ściśle format, wiesz, że nie zmieni się on wraz z kolejnymi wersjami Gita:

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> pokazuje najprzydatniejsze opcje akceptowane przez format.

[[pretty_format]]
.Użyteczne opcje dla `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Opcja    | Opis
| `%H`     | hash commitu (rewizji)
| `%h`     | skrócony hash commitu
| `%T`     | hash drzewa
| `%t`     | skrócony hash drzewa
| `%P`     | hash commitu nadrzednego
| `%p`     | skrócony hash commitu nadrzednego
| `%an`    | nazwa autora
| `%ae`    | e-mail autora
| `%ad`    | data autora (odnosi się do `--date=option`)
| `%ar`    | względna data autora
| `%cn`    | nazwa zatwierdzającego zmiany
| `%ce`    | e-mail zatwierdzającego zmiany
| `%cd`    | data zatwierdzającego zmiany
| `%cr`    | względna data zatwierdzającego zmiany
| `%s`     | temat
|================================

Pewnie zastanawiasz się jaka jest różnica pomiędzy autorem, a zatwierdzającym zmiany. Autor to osoba, która oryginalnie stworzyła pracę, a zatwierdzający zmiany to osoba, która ostatnia wprowadziła modyfikacje do drzewa. Jeśli zatem wysyłasz do projektu łatkę, a następnie któryś z jego członków nanosi ją na projekt, oboje zastajecie zapisani w historii - Ty jako autor, a członek zespołu jako osoba zatwierdzająca. Powiemy więcej o tym rozróżnieniu w Distributed Git.

Wspomniana już wcześniej opcja `oneline` jest szczególnie przydatna w parze z inną, a mianowicie, `--graph`. Tworzy ona mały graf ASCII pokazujący historię gałęzi oraz scaleń:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Ten rodzaj grafu będzie bardziej interesujący kiedy przebrniemy przez tworzenie gałęzi i ich scalanie w następnym rozdziale.

Są to jedynie podstawowe opcje formatowania wyjścia polecenia `git log` - jest ich znacznie więcej. Tabela 2-2 uwzględnia zarówno te które już poznałeś oraz inne, często wykorzystywane, wraz ze opisem każdej z nich.

[[log_options]]
.Najczęściej używane opcje `git log`
[cols="1,4",options="header"]
|================================
| Opcja             | Opis
| `-p`              | pokazuje łatkę wprowadzoną z każdym commitem
| `--stat`          | pokazuje statystyki dla zmodyfikowanych plików w każdym commicie
| `--shortstat`     | wyświetla tylko linie zmian/wprowadzeń/usunięć (z komendy `--stat)
| `--name-only`     | pokazuje listę plików zmodyfikowanych po informacjach commita
| `--name-status`   | pokazuje listę plików mających wpływ na informacje dodane/zmodyfikowane/usunięte
| `--abbrev-commit` | pokazuje tylko pirewsze kilka znaków sumy kontrolnej SHA-1
| `--relative-date` | wyświetla datę we względnym formacie (na przykład, `2 weeks ago`)
| `--graph`         | wyświetla graf ASCII gałęzi i historię połączeń obok logów
| `--pretty`        | pokazuje commity w alternatywnym formacie; opcje: oneline, short, full, fuller, format
|================================

==== Ograniczanie wyniku logów (historii)

Jako dodatek do opcji formatowania, `git log` przyjmuje także zestaw parametrów ograniczających wynik do określonego podzbioru. Jeden z takich parametrów pokazaliśmy już wcześniej: opcja `-2`, która spowodowała pokazanie jedynie dwóch ostatnich rewizji. Oczywiście, możesz podać ich dowolną liczbę - `-<n>`, gdzie "n" jest liczbą całkowitą. Na co dzień raczej nie będziesz używał tej opcji zbyt często, ponieważ Git domyślnie przekazuje wynik do narzędzia stronicującego, w skutek czego i tak widzisz tylko jedną jego stronę.

Inaczej jest z w przypadku opcji ograniczania w czasie takich jak `--since` (od) oraz `--until` (do) które są wyjątkowo przydatne. Na przykład, poniższe polecenie pobiera listę zmian dokonanych w ciągu ostatnich dwóch tygodni:

[source,console]
----
$ git log --since=2.weeks
----

Polecenie to obsługuje mnóstwo formatów - możesz uściślić konkretną datę, jak `"2008-01-15"` lub podać datę względną jak np. 2 lata 1 dzień 3 minuty temu (`"2 years 1 day 3 minutes ago"`).

Możesz także odfiltrować listę pozostawiając jedynie rewizje spełniające odpowiednie kryteria wyszukiwania. Opcja `--author` pozwala wybierać po konkretnym autorze, a opcja `--grep` na wyszukiwanie po słowach kluczowych zawartych w notkach zmian.

[NOTE]
====
Zauważ, że jeżeli potrzebujesz określić zarówno autora jak i słowa kluczowe, musisz dodać opcję `--all-match` - w przeciwnym razie polecenie dopasuje jedynie według jednego z kryteriów.
====

Inną przydatną opcją jest `-S`, która przymuje ciąg i pokazuje tylko te rewizje w których dodano lub usunięto ten ciąg. Na przykład jeżeli chcesz znaleźć ostatnią rewizję, w której dodano lub usunięto odwłoanie do określonej funkcji, możesz wywołać:

[source,console]
----
$ git log -S function_name
----

Ostatnią, szczególnie przydatną opcją, akceptowaną przez `git log` jako filtr, jest ścieżka. Możesz dzięki niej ograniczyć wynik wyłącznie do rewizji, które modyfikują podane pliki. Jest to zawsze ostatnia w kolejności opcja i musi być poprzedzona podwójnym myślnikiem `--`, tak żeby oddzielić ścieżki od pozostałych opcji.

W tabeli "Opcje ograniczające rezultat `git log`" znajduje się ta jak i kilka innych często używanych opcji.

[[limit_options]]
.Opcje ograniczające rezultat `git log`
[cols="2,4",options="header"]
|================================
| Opcja                 | Opis
| `-(n)`                | pokazuje tylko ostatnie "n" commitów
| `--since`, `--after`  | ograniczenie do commitów dokonanych po dacie
| `--until`, `--before` | ograniczenie do commitów dokonanych przed datą
| `--author`            | pokazuje tylko commity, gdzie autor jest równy wprowadzonej wartości
| `--committer`         | pokazuje tylko commity, gdzie commiter jest równy wprowadzonej wartości
| `--grep`              | pokazuje tylko commity, gdzie wiadomość commitu, zawiera wprowadzoną wartość
| `-S`                  | pokazuje tylko commity, gdzie dodano lub usunięto kod o wprowadzonej wartości
|================================

Na przykład, żeby zobaczyć wyłącznie rewizje modyfikujące pliki testowe w historii plików źródłowych Gita zatwierdzonych przez Junio Hamano, ale nie zespolonych w październiku 2008, możesz użyć następującego polecenia:

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Z prawie 40000 rewizji w historii kodu Gita, podane polecenie wyłowiło jedynie 6 spełniających zadane kryteria.
