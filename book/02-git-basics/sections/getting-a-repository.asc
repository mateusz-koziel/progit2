[[_getting_a_repo]]
=== Pierwsze repozytorium Gita

Pracę z projektem Gita możesz rozpocząć na dwa sposoby:

1. wykorzystać istniejący projekt lub katalog i zaimportować go do Gita
2. sklonować istniejące repozytorium z innego serwera

Bez względu na wybór metody, na Twoim lokalnym komputerze pojawi się repozytorium Git, które będzie przygotowane do rozpoczęcia pracy.

==== Inicjalizacja Gita w istniejącym katalogu

Jeśli masz katalog projektu, który nie ma kontroli wersji, a chcesz aby był pod kontrolą Gita, musisz najpierw przejść do wspomnianego katalogu. W zalezności od systemu:

Linux:
[source,console]
----
$ cd /home/user/my_project
----
Mac:
[source,console]
----
$ cd /Users/user/my_project
----
Windows:
[source,console]
----
$ cd c:\user\my_project
----

i wykonać komendę:

[source,console]
----
$ git init
----

To polecenie stworzy nowy podkatalog `.git`, zawierający wszystkie niezbędne pliki — szkielet repozytorium Gita. W tym momencie żadna część Twojego projektu nie jest jeszcze śledzona. (Zajrzyj do Rozdziału 9. aby dowiedzieć się, jakie dokładnie pliki są przechowywane w podkatalogu `.git`, który właśnie utworzyłeś).

Jeśli chcesz rozpocząć kontrolę wersji dla istniejących plików (w przeciwieństwie do pustego katalogu), 
powinieneś rozpocząć ich śledzenie i utworzyć początkową rewizję.
Możesz tego dokonać kilkoma poleceniami `git add` (dodaj) wybierając pojedyncze pliki, które chcesz śledzić, a następnie zatwierdzając zmiany poleceniem `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Za chwilę zobaczymy dokładnie, co wymienione polecenia robią. 
W tym jednak momencie masz już własne repozytorium Gita, śledzące wybrane pliki i zawierające pierwsze zatwierdzone zmiany (początkową rewizję).

[[_git_cloning]]
==== Klonowanie istniejącego repozytorium

Jeżeli chcesz uzyskać kopię istniejącego już repozytorium Gita — na przykład projektu, w którym chciałbyś zacząć się udzielać i wprowadzać własne zmiany — polecenie, którego potrzebujesz to `git clone`.
Jeżeli znasz już inne systemy kontroli wersji, jak np. Subversion, zauważysz z pewnością, że w przypadku Gita używane polecenie to "clone" a nie "checkout".
Jest to istotne rozróżnienie — Git pobiera kopię niemalże wszystkich danych posiadanych przez serwer.
Po wykonaniu polecenia `git clone` zostanie pobrana każda rewizja, każdego pliku w historii projektu. W praktyce nawet jeśli dysk serwera zostanie uszkodzony, możesz użyć któregokolwiek z dostępnych klonów, aby przywrócić serwer do stanu w jakim był w momencie klonowania (możesz utracić pewne hooki skonfigurowane na serwerze i tym podobne, ale wszystkie poddane kontroli wersji pliki będą spójne — zajrzyj do Rozdziału 4. aby poznać więcej szczegółów).

Repozytorium klonujesz używając polecenia `git clone [URL]`(((git commands, clone)))
Na przykład jeśli chcesz sklonować bibliotekę _libgit2_ do Gita, możesz to zrobić wywołując:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Stworzy to katalog o nazwie `libgit2`, wewnątrz którego zainicjalizowany zostanie katalog `.git` zawierający wszystkie dane z repozytorium, a kopia robocza przełaczona zostanie na ostatnią, najnowszą wersję.
Jeśli wejdziesz do katalogu `libgit2`, zobaczysz pliki projektu, gotowe do użycia lub pracy nad nimi.
Jeśli chcesz sklonować repozytorium do katalogu o nazwie innej niż `libgit2`, możesz to zrobić podając w wierszu poleceń kolejną opcję:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Powyższe polecenie robi dokładnie to samo, co poprzednie, ale wszystkie pliki umieszcza w katalogu `mylibgit`.

Git oferuje do wyboru zestaw różnych protokołów transmisji. Poprzedni przykład używa protokołu `https://`, ale możesz spotkać również `git://` lub `uzytkownik@serwer:sciezka/do/repozytorium.git`, które używają protokołu SSH.
W Rozdziale 4. omówimy wszystkie dostępne możliwości konfiguracji dostępu do repozytorium Gita na serwerze oraz zalety i wady każdej z nich.
