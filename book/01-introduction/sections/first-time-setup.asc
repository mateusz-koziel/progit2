[[_first_time]]
=== Wstępna konfiguracja Git

Teraz, gdy Git jest już zainstalowany w Twoim systemie, istotne jest wykonanie pewnych czynności konfiguracyjnych. Wystarczy to zrobić raz. Konfiguracja będzie obowiązywać także po aktualizacji Git. Ustawienia można zmienić w dowolnym momencie jeszcze raz wykonując odpowiednie polecenia.

Git posiada narzędzie zwane `git config`, które pozwala odczytać, bądź zmodyfikować zmienne, które kontrolują wszystkie aspekty działania i zachowania Git. Zmienne te mogą być przechowywane w trzech różnych miejscach:

1. plik `/etc/gitconfig`: Zawiera wartości zmiennych widoczne dla każdego użytkownika w systemie oraz dla każdego z ich repozytoriów. Jeśli dodasz opcję ` --system` do polecenia `git config`, odczytane bądź zapisane zostaną zmienne z tej właśnie lokalizacji.
2. plik `~/.gitconfig` lub `~/.config/git/config`: Lokalizacja specyficzna dla danego użytkownika. Za pomocą opcji `--global` można uzyskać dostęp do tych właśnie zmiennych.
3. plik `config` w katalogu Git (konkretnie, `.git/config`) bieżącego repozytorium.

Każdy poziom ma priorytet wyższy niż poziom poprzedni, zatem wartości zmiennych z pliku `.git/config` przesłaniają wartości zmiennych z pliku `/etc/gitconfig`.

W systemach Windows, Git szuka pliku `.gitconfig` w folderze `$HOME` (dla większości ludzi, jest to `C:\Users\$USER`).
Szuka również pliku `/etc/gitconfig`, choć w tym wypadku katalog ten jest katalogiem względnym do katalogu instalacji MSysGit.

==== Twoja tożsamość

Pierwszą rzeczą, jaką powinieneś zrobić po instalacji Git, to ustawienie nazwy użytkownika i adresu e-mail. To ważne, gdyż każdy utworzony commit używa tych informacji i jest z nimi związany:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Jeśli skorzystasz z opcji `--global` wystarczy, że taka konfiguracja zostanie dokonana jednorazowo. Git skorzysta z niej podczas każdej operacji wykonywanej przez Ciebie w danym systemie. Jeśli zaistnieje potrzeba zmiany tych informacji dla konkretnego projektu, można skorzystać z `git config` bez opcji `--global`.

Wiele graficznych narzędzi pomoże Ci jeśli uruchomisz je po raz pierwszy.


==== Twój edytor

Teraz, gdy ustaliłeś swą tożsamość, możesz skonfigurować domyślny edytor tekstu, który zostanie uruchomiony, gdy Git będzie wymagał wprowadzenia jakiejś informacji tekstowej. Standardowo Git skorzysta z domyślnego edytora systemowego.

Jeśli wolisz korzystać z innego edytora, np. z Emacsa, wykonaj następujące polecenie:

[source,console]
----
$ git config --global core.editor emacs
----

Na systemie Windows, jeśli chcesz zmienić domyślny edytor, na przykład na Notepad++, możesz to zrobić za pomocą:

System x86
[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----
System x64
[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
====
Vim, Emacs i Notepad++ są popularnymi edytorami tekstu, często wykorzystywanymi przez programistów na systemach Unixowych.
Jeśli nie jesteś zaznajomiony z tymi edytorami, poszukaj w internecie informacji jak ustawić Twój uluiony edytor jako domyslny.
====

[WARNING]
====
Jeśli nie ustawisz edytora, możesz w pewnym momencie używania Gita poczuć się zdezorientowany, kiedy zostaniesz przeniesiony do narzedzia, którego nie znasz.
====

==== Sprawdzanie ustawień

Jeśli chcesz sprawdzić bieżące ustawienia, wykonaj polecenie `git config --list`, a Git wyświetli pełną konfigurację:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Niektóre zmienne mogą pojawić się wiele razy, ponieważ Git odczytuje konfigurację z różnych plików (na przykład `/etc/gitconfig` i `~/.gitconfig`).
W takim wypadku Git korzysta z ostatniej wartości dla każdej unikalnej zmiennej, którą znajdzie.

Można również sprawdzić jaka jest rzeczywista wartość zmiennej o konkretnej nazwie za pomocą polecenia `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----
