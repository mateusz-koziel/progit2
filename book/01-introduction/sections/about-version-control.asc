=== O kontroli wersji

(((kontrola wersji)))
Czym jest "kontrola wersji" i czemu powinieneś się tym przejmować?
Kontrola wersji to system, który zapisuje zmiany do pliku (lub zbioru plików) co sprawia, że możesz "wyciągnąć" którąkolwiek z poprzednich wersji.
Dla przykładów w tej książce, będziemy posługiwali się plikami zawierającymi kod źródłowy oprogramowania, które będą kontrolowane przez system - choć równie dobrze, można robić to samo ze wszystkimi typami plików.

Jeśli jesteś grafikiem lub web designerem i chcesz zatrzymać każdą wersję obrazka lub layoutu, to System Kontroli Wersji (ang. Version Control System - VCS) jest bardzo dobrym wyborem.
Pozwala on zarówno na przywracanie pojedynczych plików, jak i całych projektów do poprzedniego stanu; ponadto pozwala na porównywanie zmian dokonanych w różnych odstepach czasu, zobaczenie kto ostatnio modyfikował fragment mogący być przyczyną problemów, kto i kiedy wprowadził błąd i wiele więcej.
Używanie VCS oznacza również, że jeśli cokolwiek zepsujesz lub stracisz jakiekolwiek pliki, możesz z łatwością to naprawić, czy odzyskać.
Dodatkowo, otrzymujesz to wszystko bardzo małym kosztem. (przyp. tłum. To zabrzmiało jak tani chwyt marketingowy.)

==== Lokalny System Kontroli Wersji

(((kontrola wersji, lolkalnie)))
Wielu ludzi stosuje metodę kontroli wersji kopiując pliki do innego katalogu (zwykle oznaczonego datą, jeśli są mądrzy).
Takie podejście jest bardzo powszechne, ponieważ jest proste, ale jednoczesnie niezwykle podatne na błędy.
Łatwo jest zapomnieć w którym się jest katalogu i omyłkowo nadpisać zły plik lub skopiować nie te pliki, które się zamierzało.

Aby poradzić sobie z tym problemem, dawno temu, programiści rozwinęli lokalne VCSy (LVCS), które miały prostą bazę danych trzymającą wszystkie zmiany plików w postaci kontroli zmian.

.Lokalna kontrola wersji.
image::images/local.png[Diagram LVC]

Jednym z bardziej popularnych narzędzi VCS był system nazywany RCS, który do dzisiejszego dnia jest dystrybuowany na wielu komputerach.
Nawet popularny system operacyjny Mac OS X zawiera komendę `rcs`, kiedy posiadasz Narzedzia Deweloperskie (ang. Developer Tools).
Działanie RCS polega na trzymaniu zestawów łat (różnic między plikami) w specjalnym formacie na dysku. Pozwala to na odtworzenie dowolnego pliku wygladajacego jak punkt w czasie przez dodanie wszystkich łatek.

==== Scentralizowane Systemy Kontroli Wersji

(((kontrola wersji, scentralizowane)))
Kolejnym głównym problemem, który napotykają ludzie, to potrzeba kolaboracji z developerami na innych systemach.
Scentralizowane Systemy Kontroli Wersji (ang. Centralized Version Control Systems - CVCSs) powstały po to, aby sobie poradzić z tym problemem.
Systemy te, takie jak CVS, Subcersion i Perforce, mają pojedynczy serwer, który zawiera wszystkie wersjonowane pliki, liczbę klientów którzy sprawdzają pliki z centralnego miejsca. (((CVS)))(((Subversion)))(((Perforce)))
Przez wiele lat był to standard w kontroli wersji.

.Scentralizowana kontrola wersji.
image::images/centralized.png[Diagram CVC]

Oferuje to wiele zalet, znacznie więcej niż LVCS.
Na przykład, wszyscy do pewnego stopnia wiedzą, co robią inne osoby w projekcie.
Administratorzy mają szczegółową kontrolę nad tym co kto może, a czego nie. Dlatego CVCS jest znacznie łatwiejsze w administracji, niż zajmowanie się lokalnymi bazami danych na każdym kliencie z osobna.

Jakkolwiek, taki układ ma również sporo wad.
Najbardziej oczywista, to pojedynczy punkt awarii, który reprezentowany jest przez scentralizowany serwer.
Jeśli serwer padnie na godzinę, to podczas tej godziny żadna osoba nie będzie w stanie współpracować z innymi lub zapisywać wersjonowanych zmian do czegokolwiek nad czym pracowała.
Jeśli dysk twardy centralnej bazy danych padnie i odpowiednie backupy nie są przechowywane, to stracisz absolutnie wszystko - całą historię projektu z wyjątkiem pojedynczych migawek ludzi, którzy mają je na lokalnych maszynach.
Systemy LVCS cierpią na ten sam problem – kiedy masz całą historię projektu w jednym miejscu, ryzukujesz, że stracisz wszystko.

==== Dystrybuowane Systemy Kontroli Wersji

(((kontrola wersji, dystrybuowane)))
To jest miejsce, w którym wkraczamy w temat Dystrybuowanych Systemów Kontroli Wersji (ang. Distributed Version Control Systems - DVCSs).
W DVCS (takich jak Git, Mercurial, Bazaar lub Darcs), klienci nie tylko sprawdzają ostatnie migawki plików, ale wręcz robią pełną kopię repozytorium.
Dlatego, jeśli serwer, na którym była wykonywana współpraca, padnie, to którekolwiek z repozytoriów klienta może być skopiowane z powrotem na serwer w celu przywrócenia.
Każdy klon jest pełnym backupem wszystkich danych.

.Dystrybuowana kontrola wersji.
image::images/distributed.png[Diagram DVC]

Ponadto, wiele z tych systemów bardzo dobrze radzi sobie z mnogością zdalnych repozytoriów, więc możesz współpracować z innymi grupami ludzi, nad różnymi punktami tego samego projektu w tym samym czasie.
Pozwala ci to na organizację wielu typów pracy, które nie są możliwe w CVS, takich jak model hierarchiczny.
